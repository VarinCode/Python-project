from abc import abstractmethod 
from datetime import datetime as dt
from random import randint , random , choice
from math import floor
# ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ module (‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏°‡∏ô‡∏π)
from menu import list_menu 
# pip install prettytable
from prettytable import PrettyTable 
# pip install typing
from typing import List , Dict , Union , Any

# |‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô|                 |‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á|
# ‡∏î‡∏≤‡∏ß‡πÇ‡∏´‡∏•‡∏î‡πå:                        git clone -b oop https://github.com/VarinCode/Python-project.git
# ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á directory ‡∏Ç‡∏≠‡∏á project:     cd Python-project
# ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á virtual environment:       py -m venv .venv
# ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô venv:                  .venv\Scripts\activate
# ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á library ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô project:     pip install -r requirement.txt
# ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏£‡∏±‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°:                   py main.py ‡∏´‡∏£‡∏∑‡∏≠ py "C:\Users\‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå\Desktop\Python-project\main.py"
# ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô venv:                   deactivate

class Configuration: #? ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏≠‡∏á Program
    #? ‡∏Å‡∏≥‡∏´‡∏ô‡∏î methods ‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ
    #? abstract methods ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡πÑ‡∏ß‡πâ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô private methods ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    
    @abstractmethod
    def __setElements__(self) -> None:
        pass
    
    @abstractmethod
    def __searchMenu__(self , param: str) -> int:
        pass
    
    @abstractmethod
    def __placeOrder__(self) -> None:
        pass
    
    @abstractmethod
    def __addItems__(self) -> None:
        pass
    
    @abstractmethod
    def __addItems__(self) -> None:
        pass
    
    @abstractmethod
    def __removeItems__(self) -> None:
        pass
    
    @abstractmethod
    def __editItems__(self) -> None:
        pass
    
    @abstractmethod
    def __deleteMenu__(self) -> None:
        pass
    
    @abstractmethod
    def __exitProgram__(self) -> None:
        pass

class Program(Configuration):
    #? ‡∏Å‡∏≥‡∏´‡∏ô‡∏î attributes
    #* ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
    days = ("‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå", "‡∏≠‡∏±‡∏á‡∏Ñ‡∏≤‡∏£", "‡∏û‡∏∏‡∏ò", "‡∏û‡∏§‡∏´‡∏±‡∏™‡∏ö‡∏î‡∏µ", "‡∏®‡∏∏‡∏Å‡∏£‡πå", "‡πÄ‡∏™‡∏≤‡∏£‡πå" , "‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå")
    months = ("‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°", "‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå", "‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°", "‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô", "‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°", "‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô", "‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°", "‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏°", "‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô", "‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°", "‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô", "‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°")
    #* ‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    now = dt.now()
    time = now.time()
    year = now.date().year + 543
    today = now.date().strftime('%d/%m/%Y') 
    #* ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÑ‡∏ß‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡πÄ‡∏•‡∏Ç index ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏´‡∏≤‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏ô‡∏π
    __foodList__: List[str] = []
    __idList__: List[str] = []
    #* ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏±‡πà‡∏á‡πÄ‡∏°‡∏ô‡∏π‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏à‡∏∞‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÉ‡∏ô‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ order
    currentOrder: Dict[str , int] = {} # key ‡∏Ñ‡∏∑‡∏≠ ‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏≤‡∏´‡∏≤‡∏£ , value ‡∏Ñ‡∏∑‡∏≠ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏±‡πà‡∏á
    __allOrders__: List[Dict[str , int]] = []    # order ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏∞‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÉ‡∏ô list 
    result = 0          # ‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏£‡∏ß‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á currentOrder
    __totalMoney__ = 0    # ‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô 1‡∏ß‡∏±‡∏ô
    orderNumber = 0   # ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á order
    #* ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°
    __programStatus__ = {
       "isDeleted": False, # ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
       "isWorking": None,  # ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
       "programeIsRunning" : False, # ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏´‡∏•‡∏±‡∏Å
       "isInvokeMethods": None # ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á method , True: method ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô , False: method ‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
    }
    #* ‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°
    __KEYWORDS__ = ("e" , "c", "m" , "b", "a" , "d" , "ed" , "cl" , "exit" , "commands", "menu" , "buy" ,"add" , "delete" , "edit" , "clear")
    #* ‡πÄ‡∏ä‡πá‡∏Ñ‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡πÉ‡∏™‡πà‡∏°‡∏≤‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    def isKeyword(self , param: str) -> bool:
        return param in self.__KEYWORDS__

    #? ‡∏£‡∏±‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏ï‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    def __init__(self , menu:List[Dict[str , Union[int , str]]] , table: Any) -> None:
        # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°
        self.__programStatus__["programeIsRunning"] = True 
        # ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤ parameter(menu) ‡∏°‡∏≤‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÉ‡∏ô attribute menu
        self.__menu__ = menu
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á
        self.__menuTable__ = table() # ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£
        self.__commandsTable__ = table() # ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏•‡∏Ç id(‡∏£‡∏´‡∏±‡∏™‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤)
        for item in self.__menu__: 
            item["id"] = self.createID()
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞ columns
        self.__commandsTable__.add_column('‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á', self.__KEYWORDS__[:8]) # index ‡∏ó‡∏µ‡πà 0 - 7
        self.__commandsTable__.add_column('‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÄ‡∏ï‡πá‡∏°', self.__KEYWORDS__[8:]) # index ‡∏ó‡∏µ‡πà 8 ‡∏Ç‡∏∂‡πâ‡∏ô‡πÑ‡∏õ
        self.__commandsTable__.add_column("‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á" , ("‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°" , "‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á" , "‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏°‡∏ô‡∏π‡∏≠‡∏≤‡∏´‡∏≤‡∏£" , "‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤" , "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤" , "‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤" ,"‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ä‡∏∑‡πà‡∏≠‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤" , "‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î") )
        self.__setElements__() # ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ property(value) ‡πÉ‡∏ô dict ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÉ‡∏ô list ‡∏ï‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°
        self.greeting(self.time.hour) # ‡∏ó‡∏±‡∏Å‡∏ó‡∏≤‡∏¢‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
        self.showCommands() # ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á
    
    #? function ‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤
    def greeting(self , h: int) -> None:
        hi = ''
        if 12 > h >= 0: hi = '‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏ï‡∏≠‡∏ô‡πÄ‡∏ä‡πâ‡∏≤'
        elif 18 >= h >= 12: hi = '‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏ï‡∏≠‡∏ô‡∏ö‡πà‡∏≤‡∏¢'
        elif 23 >= h >= 19: hi = '‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏ï‡∏≠‡∏ô‡πÄ‡∏¢‡πá‡∏ô'
        # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
        print(f'üôè {hi} ‡∏ß‡∏±‡∏ô{self.days[self.now.date().weekday()]} ‡∏ó‡∏µ‡πà {self.now.date().day} ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô {self.months[self.now.date().month - 1]} ‡∏õ‡∏µ ‡∏û.‡∏®. {self.year} ({self.today})')
        print(f"üïì ‡πÄ‡∏ß‡∏•‡∏≤ {self.time.hour}:{f'0{self.time.minute}' if self.time.minute < 10 else self.time.minute}:{f'0{self.time.second}' if self.time.second < 10 else self.time.second}")
        print('‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ üôÇ')
        
    #? function ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏•‡∏Ç id
    def createID(self , length: int = 3) -> int:
        numbers = []  # ‡πÄ‡∏Å‡πá‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏™‡∏∏‡πà‡∏°‡∏°‡∏≤‡πÑ‡∏î‡πâ‡πÑ‡∏ß‡πâ‡πÉ‡∏ô list
        rand = lambda: str(floor(random() * randint(1,10000)))  # ‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏Ç‡∏™‡πà‡∏á‡∏Ñ‡∏∑‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô string ‡∏Å‡πâ‡∏≠‡∏ô‡πÉ‡∏´‡∏ç‡πà
        while True:
            num = choice(rand()) # ‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏Å 1 element ‡πÄ‡∏•‡∏Ç‡∏Ç‡∏≠‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå 
            if len(numbers) == length: break # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡πÑ‡∏ß‡πâ‡πÉ‡∏´‡πâ‡∏´‡∏¢‡∏∏‡∏î loop ‡∏ã‡πâ‡∏≥
            else: 
                numbers.append(num)  # ‡πÄ‡∏Å‡πá‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ô list
                if numbers[0] == '0': numbers.remove('0') # ‡πÑ‡∏°‡πà‡πÄ‡∏≠‡∏≤‡πÄ‡∏•‡∏Ç 0 ‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤
        newId = str("".join(numbers))  # ‡∏£‡∏ß‡∏° element ‡πÉ‡∏ô list ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
        numbers.clear()
        return newId
    
    #? function ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ñ‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô foodList , idList ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ô‡πÄ‡∏°‡∏ô‡∏π (menu) ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏•‡∏á ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ó‡∏±‡πâ‡∏á 2 ‡∏ï‡∏±‡∏ß‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ï‡∏≤‡∏°‡∏î‡πâ‡∏ß‡∏¢
    def __setElements__(self) -> None:
        # function getValue ‡∏à‡∏∞‡∏ß‡∏ô loop ‡∏î‡∏∂‡∏á value ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô dict ‡∏Ç‡∏≠‡∏á menu
        def getValue(setInitialValue: List[str] , keyName: str) -> List[str]: 
            setInitialValue.clear() # ‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡πà‡∏≤ elements ‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
            for item in self.__menu__: setInitialValue.append(item[keyName]) # ‡πÄ‡∏û‡∏¥‡πà‡∏° element ‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏´‡πâ parameter
            newValue = setInitialValue 
            return newValue
        # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤ list ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏´‡πâ 2 ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£
        self.__foodList__ = getValue(setInitialValue=self.__foodList__ , keyName="name") 
        self.__idList__ = getValue(setInitialValue=self.__idList__ , keyName="id")
        
    #? function ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ dictionary ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô foodList , idList (‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô list) ‡∏™‡πà‡∏á‡∏Ñ‡∏∑‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏•‡∏Ç index
    def __searchMenu__(self , param: str) -> int:
        try:
            # ‡πÄ‡∏ä‡πá‡∏Ñ parameter ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤ 
            checked =  param.strip() # ‡∏ï‡∏±‡∏î‡πÄ‡∏ß‡πâ‡∏ô‡∏ß‡πà‡∏≤‡∏á‡∏≠‡∏≠‡∏Å
            if checked in self.__foodList__:
                idx = self.__foodList__.index(checked)
            elif checked in self.__idList__:
                idx = self.__idList__.index(checked)
            elif (checked not in self.__foodList__) and (checked not in self.__idList__): 
                raise Warning(f'‚ùå "{param}" ‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÄ‡∏°‡∏ô‡∏π‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á!')
            else:
                raise Warning(f'‚ùå "{param}" ‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÄ‡∏°‡∏ô‡∏π‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á!')
            return idx
        except Warning as err:
            print(err)
        
    #? function ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏°‡∏ô‡∏π‡∏≠‡∏≤‡∏´‡∏≤‡∏£
    def showMenu(self):
        # ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô API: https://pypi.org/project/prettytable
        self.__menuTable__.clear() # reset ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ function
        self.__menuTable__.field_names = ('‡∏•‡∏≥‡∏î‡∏±‡∏ö' , '‡∏≠‡∏≤‡∏´‡∏≤‡∏£' , '‡∏£‡∏≤‡∏Ñ‡∏≤(‡∏ö‡∏≤‡∏ó)' , '‡∏£‡∏´‡∏±‡∏™‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤') # ‡∏™‡∏£‡πâ‡∏≤‡∏á field
        n = 1 
        for item in self.__menu__:
            # print(f'{n}. {item["name"]} ‡∏£‡∏≤‡∏Ñ‡∏≤ {item["price"]} ‡∏ö‡∏≤‡∏ó ‡∏£‡∏´‡∏±‡∏™‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ {item["id"]}')
            self.__menuTable__.add_row((n , item["name"] , item["price"] , int(item["id"])) , divider=True) # ‡πÄ‡∏û‡∏¥‡πà‡∏° row ‡πÉ‡∏´‡∏°‡πà‡∏ï‡∏≤‡∏°‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            n += 1
        # ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏°‡∏ô‡∏π‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á (‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÉ‡∏ô‡∏£‡∏π‡πÅ‡∏ö‡∏ö ternary operator)
        print(f'üåü ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏î‡πÜ‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏ô‡∏π!') if self.__menu__.__len__() == 0 else print('\n',self.__menuTable__ , '\n')
    
    #? function ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á
    def showCommands(self) -> None:
        print('\n‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£'.center(50))
        print(self.__commandsTable__,'\n')
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ï‡∏≠‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ methods
    def notify(self , text: str) -> None: # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡∏û‡∏¥‡∏°‡∏û‡πå‡πÑ‡∏õ
        print(f'‚ùî ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ï‡∏±‡∏ß "m" ‡∏´‡∏£‡∏∑‡∏≠ "menu ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏°‡∏ô‡∏π‡∏≠‡∏≤‡∏´‡∏≤‡∏£\n‚ùî ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ï‡∏±‡∏ß "e" ‡∏´‡∏£‡∏∑‡∏≠ "end" {text}')
        
    #? function ‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
    def __placeOrder__(self) -> None:  
        self.notify("‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠")
        # infinite loop ‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á "e" ‡∏´‡∏£‡∏∑‡∏≠ "end" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å loop
        while self.__programStatus__["isInvokeMethods"]:
            try:
                foodName = input("‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ : ")
                foodName = foodName.lower().strip()
                if foodName == 'm' or foodName == 'menu': # ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏ô‡∏π
                    self.showMenu()
                    continue
                elif foodName == "e" or foodName == "end":
                    # ! ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á function __placeOrder__
                    calculateOrder()
                    self.__programStatus__["isInvokeMethods"] = False
                elif (foodName in self.__foodList__) or (foodName in self.__idList__):
                    while True:
                        try:
                            amount = int(input("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô : ")) # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£
                            if (amount <= 0) and not (foodName.isdigit()):
                                raise UserWarning("‚ùå ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡∏î‡πÉ‡∏™‡πà‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á!")
                        except ValueError:
                            print("‚ùå ‡πÇ‡∏õ‡∏£‡∏î‡πÉ‡∏™‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏•‡∏Ç‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ï‡πá‡∏°‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô!")
                        except UserWarning as err:
                            print(err)
                        else:
                            break
                    # ‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏´‡∏±‡∏™‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏≤‡∏´‡∏≤‡∏£
                    if foodName in self.__idList__: 
                        idx = self.__searchMenu__(foodName)
                        foodName = self.__menu__[idx]["name"]
                    # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ key ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô dict    
                    if foodName not in self.currentOrder: 
                        self.currentOrder[foodName] = amount # ‡πÄ‡∏Å‡πá‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£
                    # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠ key ‡∏ã‡πâ‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà     
                    elif foodName in self.currentOrder: 
                        self.currentOrder[foodName] += amount # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
                # ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÄ‡∏°‡∏ô‡∏π    
                elif (foodName not in self.__foodList__) or (foodName not in self.__foodList__): 
                    raise UserWarning(f'‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠ "{foodName}" ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÄ‡∏°‡∏ô‡∏π‡∏≠‡∏≤‡∏´‡∏≤‡∏£!')
                else:
                    raise UserWarning(f'‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠ "{foodName}" ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÄ‡∏°‡∏ô‡∏π‡∏≠‡∏≤‡∏´‡∏≤‡∏£!')
            except ValueError:
                print("‚ùå ‡πÇ‡∏õ‡∏£‡∏î‡πÉ‡∏™‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏•‡∏Ç‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ï‡πá‡∏°‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô!")
            except UserWarning as err:
                print(err)
                
            # ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á method ‡∏ô‡∏µ‡πâ‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏£‡∏ß‡∏° order ‡∏ó‡∏µ‡πà‡∏™‡∏±‡πà‡∏á‡πÑ‡∏õ
            def calculateOrder() -> None:
                priceList:List[int] = [] # ‡πÄ‡∏Å‡πá‡∏ö‡∏£‡∏≤‡∏Ñ‡∏≤‡∏≠‡∏≤‡∏´‡∏≤‡∏£(‡∏£‡∏≤‡∏Ñ‡∏≤‡∏à‡∏≤‡∏ô‡∏•‡∏∞)
                showOrder = self.currentOrder.copy() # dict ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô print                
                self.__allOrders__.append(self.currentOrder.copy()) # ‡πÄ‡∏Å‡πá‡∏ö order
                for item in self.currentOrder:  # loop ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏°‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
                    idx = self.__searchMenu__(item) # ‡∏´‡∏≤‡πÄ‡∏•‡∏Ç index ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏°‡∏≤‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡πÄ‡∏°‡∏ô‡∏π
                    # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ X ‡∏Å‡∏±‡∏ö‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÄ‡∏°‡∏ô‡∏π = ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ô‡∏±‡πâ‡∏ô
                    # currentOrder{ Key: ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏≤‡∏´‡∏≤‡∏£ , Value: ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏≤‡∏Ñ‡∏≤‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î }
                    self.currentOrder[item] = (self.currentOrder[item] * self.__menu__[idx]["price"])
                    # ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏£‡∏µ‡∏¢‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ç‡∏≠‡∏á currentOrder
                    priceList.append(self.__menu__[idx]["price"])
                self.result = sum(self.currentOrder.values())
                self.__totalMoney__ += self.result
                self.orderNumber += 1
                # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πà‡∏™‡∏±‡πà‡∏á‡∏≠‡∏∞‡πÑ‡∏£‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
                if self.currentOrder.__len__() != 0: 
                    print(f"\n‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà {self.orderNumber}. ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏™‡∏±‡πà‡∏á‡πÑ‡∏õ‡∏Ñ‡∏∑‡∏≠ : ")
                    for number, key in enumerate(showOrder):
                        print(f"üçΩ {number + 1}. {key} ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô {showOrder[key]:,} ‡∏≠‡∏¢‡πà‡∏≤‡∏á ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏à‡∏≤‡∏ô‡∏•‡∏∞ {priceList[number]} ‡∏ö‡∏≤‡∏ó ‡∏£‡∏ß‡∏°‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏á‡∏¥‡∏ô {self.currentOrder[key]:,} ‡∏ö‡∏≤‡∏ó")
                    print(f"üí∏ ‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏£‡∏ß‡∏°‡∏ó‡πâ‡∏á‡∏´‡∏°‡∏î {self.result:,} ‡∏ö‡∏≤‡∏ó")
                # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏±‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏´‡πâ set ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà‡∏´‡∏°‡∏î (‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ order ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏≠‡∏≠‡∏Å)
                self.result = 0
                self.currentOrder.clear()
        
    #? function ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
    def __addItems__(self) -> None:
        self.notify('‡πÄ‡∏û‡∏¥‡πà‡∏≠‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤')
        # infinite loop ‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á "e" ‡∏´‡∏£‡∏∑‡∏≠ "end" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å loop
        while True:
            try:
                newItem = input('‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà : ') 
                newItem = newItem.strip().lower()
                if newItem == "e" or newItem == "end": # ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á function 
                    break
                elif newItem == "m" or newItem == "menu": # ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏ô‡∏π
                    self.showMenu()
                    continue
                elif (newItem in self.__foodList__) and not(newItem == "e" or newItem == "end") and not(newItem == "m" or newItem == "menu"):
                    raise UserWarning(f'‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠ "{newItem}" ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏°‡∏ô‡∏π‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡∏ã‡πâ‡∏≥‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÄ‡∏°‡∏ô‡∏π‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà!')
                elif newItem.isdigit() or newItem[0].isdigit(): 
                    raise UserWarning(f'‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏•‡∏Ç‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πâ‡∏ô‡πÑ‡∏î‡πâ')
            except UserWarning as err:
                print(err)
            else:
                while True:
                    try:
                        price = int(input('‡∏£‡∏≤‡∏Ñ‡∏≤‡∏≠‡∏≤‡∏´‡∏≤‡∏£ : '))         
                        if len(newItem) >= 28: 
                            raise UserWarning('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏î‡πâ')
                        elif price > 1000: 
                            raise UserWarning('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏±‡πâ‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏Å‡∏¥‡∏ô 1,000 ‡∏ö‡∏≤‡∏ó‡πÑ‡∏î‡πâ')
                        elif price <= 0: 
                            raise UserWarning('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏±‡πâ‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏•‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡∏®‡∏π‡∏ô‡∏¢‡πå‡πÑ‡∏î‡πâ')
                        else:
                            if newItem not in self.__foodList__:
                                # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà
                                self.__menu__.append({ 
                                    "name": newItem,
                                    "price": price,
                                    "id": self.createID()
                                })          
                                print('‚úî ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô')
                                print(f'üçñ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏°‡∏µ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ {len(self.__menu__)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£')
                                self.__setElements__()   
                            else: 
                                raise UserWarning(f'‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠ "{newItem}" ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏°‡∏ô‡∏π‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡∏ã‡πâ‡∏≥‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÄ‡∏°‡∏ô‡∏π‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà!')
                    except UserWarning as err:
                        print(err)
                    except ValueError:
                        print('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏±‡πâ‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ï‡πá‡∏°‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô!')
                    else: break

    # ? function ‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
    def __removeItems__(self) -> None:
        self.notify("‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÄ‡∏°‡∏ô‡∏π")
        def deleteElements(param):
            findIndex = self.__searchMenu__(param) # ‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏•‡∏Ç index
            del self.__menu__[findIndex]
            self.__setElements__()
            self.__programStatus__["isDeleted"] = True
        # infinite loop ‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á "e" ‡∏´‡∏£‡∏∑‡∏≠ "end" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å loop
        while True:
            self.__programStatus__["isDeleted"] = False
            try:
                item = input('‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏•‡∏ö : ')
                item = item.lower().strip() 
                if item == 'e' or item == 'end':  # ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á function
                    break
                elif item == 'm' or item == 'menu': # ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏ô‡∏π
                    self.showMenu()
                    continue
                elif ',' in item or ',' in [*item]: # ‡∏ñ‡πâ‡∏≤‡πÉ‡∏™‡πà , ‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡πÄ‡∏á‡∏¥‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ô‡∏µ‡πâ
                    formatList = item.split(',') # ‡∏•‡∏ö , ‡∏≠‡∏≠‡∏Å
                    # ‡∏à‡∏±‡∏î‡∏£‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
                    for i in range(formatList.__len__()): 
                        formatList[i] = formatList[i].strip()
                        # ‡∏ñ‡πâ‡∏≤‡πÉ‡∏™‡πà , ‡πÅ‡∏•‡πâ‡∏ß‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏•‡∏Ç id ‡∏ï‡πà‡∏≠‡∏ó‡πâ‡∏≤‡∏¢‡πÉ‡∏´‡πâ‡∏•‡∏ö‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô
                    if '' in formatList:
                        count = formatList.count('')
                        for j in range(count):
                            formatList.remove('')
                    # ‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏•‡∏∞‡∏ä‡∏¥‡πâ‡∏ô
                    for element in formatList: 
                        if element in self.__foodList__: 
                            deleteElements(element)
                        elif element in self.__idList__: 
                            deleteElements(element)
                        elif (element not in self.__foodList__) and (element not in self.__idList__):
                            raise UserWarning(f"‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ \"{item}\" ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÄ‡∏°‡∏ô‡∏π‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏•‡∏Ç id ‡πÉ‡∏´‡∏°‡πà")
                elif (item in self.__foodList__) or (item in self.__idList__): 
                    deleteElements(item)
                elif (item not in self.__foodList__) and (item not in self.__idList__):
                    raise UserWarning(f"‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ \"{item}\" ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÄ‡∏°‡∏ô‡∏π‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏•‡∏Ç id ‡πÉ‡∏´‡∏°‡πà")
                else: 
                    raise UserWarning(f"‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ \"{item}\" ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÄ‡∏°‡∏ô‡∏π‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏•‡∏Ç id ‡πÉ‡∏´‡∏°‡πà")
            except UserWarning as err:
                print(err)
            except ValueError:
                print(f"‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ \"{item}\" ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÄ‡∏°‡∏ô‡∏π‡∏≠‡∏≤‡∏´‡∏≤‡∏£")
            else:
                if self.__programStatus__["isDeleted"]:
                    print('‚úî ‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô')
                    print(f'üçñ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏°‡∏µ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ {len(self.__menu__)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£')

    # ? function ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
    def __editItems__(self) -> None:
        self.notify("‡πÄ‡∏û‡∏¥‡πà‡∏≠‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç")
        # infinite loop ‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á "e" ‡∏´‡∏£‡∏∑‡∏≠ "end" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å loop
        while self.__programStatus__["isInvokeMethods"]:
            try:
                item = input('‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç : ')
                item = item.lower().strip()
                # ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á method
                if item == 'e' or item == 'end': 
                    self.__programStatus__["isInvokeMethods"] = False
                # ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏ô‡∏π    
                elif item == 'm' or item == 'menu': 
                    self.showMenu()
                    continue
                else:
                    # ‡∏´‡∏≤‡πÄ‡∏•‡∏Ç index ‡∏Ç‡∏≠‡∏á‡πÄ‡∏°‡∏ô‡∏π‡∏≠‡∏≤‡∏´‡∏≤‡∏£
                    findIndex = self.__searchMenu__(item)
                    idx = findIndex
                    # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô terminal
                    print(f'‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ‡∏Ñ‡∏∑‡∏≠ {self.__menu__[idx]["name"]} ‡∏£‡∏≤‡∏Ñ‡∏≤ {self.__menu__[idx]["price"]} ‡∏ö‡∏≤‡∏ó')
                    # ‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏´‡∏°‡πà
                    changeFoodName = input(f'‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ä‡∏∑‡πà‡∏≠ ‡∏à‡∏≤‡∏Å "{self.__menu__[idx]["name"]}" ‡πÄ‡∏õ‡πá‡∏ô --> : ')
                    #! ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
                    assert not(changeFoodName in self.__foodList__) 
                    assert not(changeFoodName == '' or changeFoodName.__len__() == 0)
                    # ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏´‡∏°‡πà
                    price = int(input(f'‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏£‡∏≤‡∏Ñ‡∏≤ ‡∏à‡∏≤‡∏Å {self.__menu__[idx]["price"]} ‡∏ö‡∏≤‡∏ó ‡πÄ‡∏õ‡πá‡∏ô --> : '))
                    if (price > 1000 or price <= 0) or (price not in range(1 , 1000)): # ‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 1000 ‡∏ö‡∏≤‡∏ó ‡πÅ‡∏•‡∏∞ ‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏ï‡∏¥‡∏î‡∏•‡∏ö‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏®‡∏π‡∏ô‡∏¢‡πå
                        raise UserWarning('‚ùå ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏±‡πâ‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏≤‡∏Ñ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 1,000 ‡∏ö‡∏≤‡∏ó‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô!')
                    else:
                        #* ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• dictionary ‡πÉ‡∏ô‡πÄ‡∏°‡∏ô‡∏π
                        self.__menu__[idx]["name"] = changeFoodName
                        self.__menu__[idx]["price"] = price
                        print('‚úî ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô')                
                        self.__setElements__()
            except ValueError:
                print('üî¥ Error:\n‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ï‡πá‡∏°‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô!')
            except AssertionError:
                print('üî¥ Error:\n‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ô‡∏±‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏ã‡πâ‡∏≥‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÄ‡∏°‡∏ô‡∏π‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ô ‡∏´‡∏£‡∏∑‡∏≠ ‡∏´‡πâ‡∏≤‡∏°‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤!')
            except UserWarning as err:
                print(err)

    # ? function ‡∏™‡∏£‡∏∏‡∏õ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
    def conclusion(self , total: int , orders: List[Dict[str , int]]) -> str:
        quantity = 0 # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏™‡∏±‡πà‡∏á‡πÑ‡∏õ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        for i in range(len(orders)):
            element = orders[i] # ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á dict ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏≠‡∏±‡∏ô‡πÉ‡∏ô list
            for j in element: # ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á dist ‡πÅ‡∏•‡πâ‡∏ß‡∏î‡∏∂‡∏á key ‡∏°‡∏≤‡πÉ‡∏ä‡πâ , ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ j ‡∏Ñ‡∏∑‡∏≠‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏≠‡∏≤‡πÑ‡∏ß‡πâ 
                quantity += element[j] # ‡∏ö‡∏ß‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏≠‡∏≤‡∏´‡∏≤‡∏£
        return f'\nüîµ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ {len(orders):,} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ {quantity:,} ‡∏≠‡∏¢‡πà‡∏≤‡∏á ‡∏ó‡∏≥‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏£‡∏ß‡∏°‡πÑ‡∏õ‡πÑ‡∏î‡πâ {total:,} ‡∏ö‡∏≤‡∏ó'

    #? function ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÄ‡∏°‡∏ô‡∏π‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
    def __deleteMenu__(self) -> None:
        if input('‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏û‡∏¥‡∏°‡∏û‡πå "y" ‡πÅ‡∏ï‡πà‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏π‡πâ‡πÑ‡∏ß‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏ñ‡∏≤‡∏ß‡∏£‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡πÑ‡∏î‡πâ : ').lower() == "y":
            self.__menu__.clear()
            print('‚úî ‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô')
        else: print('‚ùó ‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î')

    #? function ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°
    def __exitProgram__(self) -> None:
        self.__programStatus__["isWorking"] = False
        #* ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ã‡∏∑‡πâ‡∏≠‡πÑ‡∏õ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 1 ‡∏ß‡∏±‡∏ô ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏™‡∏î‡∏á
        self.__allOrders__.__len__() != 0 and print(self.conclusion(total=self.__totalMoney__ , orders=self.__allOrders__))
        print('üôè ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏°‡∏≤‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤')
        print("<------ ‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏° ------>")
        self.__programStatus__["programeIsRunning"] = False

    #? function ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°
    def EXECUTE(self) -> None:
        while self.__programStatus__["programeIsRunning"]:
            self.__programStatus__["isWorking"] = True
            try:
                command = input("üü¢ ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡πÑ‡∏õ >>> ")
                command = command.lower().strip()
                # ! ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
                assert command != "" or len(command) == 0 # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏≠‡∏∞‡πÑ‡∏£‡∏°‡∏≤
                # ? ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á
                if self.isKeyword(command):
                    # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ attribute ‡∏ï‡∏±‡∏ß‡∏ô‡∏µ‡πâ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô True ‡∏´‡∏°‡∏≤‡∏¢‡∏ñ‡∏∂‡∏á‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ method(function) ‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°
                    self.__programStatus__["isInvokeMethods"] = True
                    #* ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°
                    if command == "e" or command == "exit":
                        self.__exitProgram__()
                    #* ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á
                    elif command == "c" or command == "commands": 
                        self.showCommands()
                    #* ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏ô‡∏π
                    elif command == "m" or command == "menu": 
                        self.showMenu()
                    #* ‡∏ã‡∏∑‡πâ‡∏≠‡∏≠‡∏≤‡∏´‡∏≤‡∏£
                    elif command == "b" or command == "buy":
                        self.__placeOrder__()
                    #* ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
                    elif command == "a" or command == "add": 
                        self.__addItems__()
                    #* ‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
                    elif command == "d" or command == "delete":
                        self.__removeItems__()
                    #* ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
                    elif command == "ed" or command == "edit": 
                        self.__editItems__()
                    #* ‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
                    elif command == "cl" or command == "clear":
                        self.__deleteMenu__()
                #* ‡πÑ‡∏°‡πâ‡∏°‡∏µ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
                else: 
                    raise UserWarning(f'üî¥ Error: ‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏≥‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á "{command}" ‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏£‡∏∞‡∏ö‡∏∏‡πÑ‡∏ß‡πâ‡πÉ‡∏´‡πâ')
            except UserWarning as err:
                print(err)
            except ValueError:
                print(f'üî¥ Error: ‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ó‡πà‡∏≤‡∏ô‡∏´‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÄ‡∏°‡∏ô‡∏π‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á!')
            except AssertionError:
                print("üî¥ Error: ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏õ‡πâ‡∏≠‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÇ‡∏õ‡∏£‡∏î‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á")
            finally:
                self.__programStatus__["isWorking"] and print('‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á')

# ‡∏™‡∏£‡πâ‡∏≤‡∏á instance(object) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏≥‡πÑ‡∏õ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
program = Program(menu=list_menu[:20] , table=PrettyTable)
program.EXECUTE() # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ method ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á program
